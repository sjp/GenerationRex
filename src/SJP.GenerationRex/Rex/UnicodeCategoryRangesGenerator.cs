using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

using EnumsNET;

namespace Rex
{
    public static class UnicodeCategoryRangesGenerator
    {
        public static void Generate(string namespacename, string classname, string path)
        {
            if (classname == null)
                throw new ArgumentNullException(nameof(classname));
            if (path == null)
                throw new ArgumentNullException(nameof(path));
            if (path != "" && !path.EndsWith("/"))
                path += "/";
            var str1 = "//\r\n//Automatically generated by UnicodeCategoryRangesGenerator\r\n//\r\nnamespace " + namespacename + "\r\n{\r\npublic static class " + classname + "\r\n{";
            var fileInfo = new FileInfo(string.Format("{1}{0}.cs", classname, path));
            if (fileInfo.Exists)
                fileInfo.IsReadOnly = false;

            using (var sw = File.AppendText(string.Format("{1}{0}.cs", classname, path)))
            {
                sw.WriteLine(str1);
                /*sw.WriteLine("#region ASCII");
                WriteRangeFields(7, sw, "ASCII");
                sw.WriteLine("#endregion");
                sw.WriteLine();
                sw.WriteLine("#region CP437");
                WriteRangeFields(8, sw, "CP437");
                sw.WriteLine("#endregion");
                sw.WriteLine();*/
                sw.WriteLine("#region Unicode (UTF16)");
                WriteRangeFields(sw, "Unicode");
                sw.WriteLine("#endregion");
                sw.WriteLine();
                sw.WriteLine("}\r\n}\r\n");
            }
        }

        private static void WriteRangeFields(StreamWriter sw, string field)
        {

            var dictionary = new Dictionary<UnicodeCategory, Ranges>();
            foreach (var category in Enums.GetValues<UnicodeCategory>())
                dictionary[category] = new Ranges();

            const int bits = 16;
            const int num1 = (1 << bits) - 1;
            var ranges = new Ranges();
            for (int n = 0; n <= num1; n++)
            {
                var c = (char)n;
                if (char.IsWhiteSpace(c))
                    ranges.Add(n);
                var category = char.GetUnicodeCategory(c);
                dictionary[category].Add(n);
            }

            var bddArray = new BinaryDecisionDiagram[30];
            var bddBuilder = new BinaryDecisionDiagramBuilder(bits);
            for (int index = 0; index < 30; ++index)
                bddArray[index] = bddBuilder.MkBddForIntRanges(dictionary[(UnicodeCategory)index].RangeCollection);
            BinaryDecisionDiagram bdd1 = bddBuilder.MkBddForIntRanges(ranges.RangeCollection);
            BinaryDecisionDiagram bdd2 = bddBuilder.MkOr(bddArray[0], bddBuilder.MkOr(bddArray[1], bddBuilder.MkOr(bddArray[2], bddBuilder.MkOr(bddArray[3], bddBuilder.MkOr(bddArray[4], bddBuilder.MkOr(bddArray[8], bddArray[18]))))));
            sw.WriteLine("/// <summary>\r\n/// Compact BDD encodings of the categories.\r\n/// </summary>");
            sw.WriteLine("public static int[][] " + field + "Bdd = new int[][]{");
            foreach (UnicodeCategory key in dictionary.Keys)
            {
                sw.WriteLine("//{0}({1}):", key, key);
                BinaryDecisionDiagram bdd3 = bddArray[(int)key];
                if (bdd3 == null || bdd3 == BinaryDecisionDiagram.False)
                {
                    sw.WriteLine("null, //false");
                }
                else if (bdd3 == BinaryDecisionDiagram.True)
                {
                    sw.WriteLine("new int[]{0,0}, //true");
                }
                else
                {
                    sw.WriteLine("new int[]{");
                    foreach (int num2 in bddBuilder.SerializeCompact(bdd3))
                        sw.WriteLine("{0},", num2);
                    sw.WriteLine("},");
                }
            }
            sw.WriteLine("};");
            sw.WriteLine("/// <summary>\r\n/// Compact BDD encoding of the whitespace characters.\r\n/// </summary>");
            sw.WriteLine("public static int[] " + field + "WhitespaceBdd = new int[]{");
            foreach (int num2 in bddBuilder.SerializeCompact(bdd1))
                sw.WriteLine("{0},", num2);
            sw.WriteLine("};");
            sw.WriteLine("/// <summary>\r\n/// Compact BDD encoding of word characters is the BDD for the union of categories 0,1,2,3,4,8,18\r\n/// </summary>");
            sw.WriteLine("public static int[] " + field + "WordCharacterBdd = new int[]{");
            foreach (int num2 in bddBuilder.SerializeCompact(bdd2))
                sw.WriteLine("{0},", num2);
            sw.WriteLine("};");
        }

        private class Ranges
        {
            internal Ranges()
            {
            }

            internal void Add(int n)
            {
                for (int index = 0; index < RangeCollection.Count; ++index)
                {
                    if (RangeCollection[index][1] == n - 1)
                    {
                        RangeCollection[index][1] = n;
                        return;
                    }
                }
                RangeCollection.Add(new int[2] { n, n });
            }

            internal int Count => RangeCollection.Count;

            internal List<int[]> RangeCollection = new List<int[]>();
        }
    }
}
